/*
 *  Video Squirrel, a cross-platform movie cataloger
 *
 *  realmedia_reader.h
 *
 *  Copyright (C) Jory Stone - June 2003
 *  Copyright (C) Gabest - ?2003
 *
 *  Video Squirrel is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2, or (at your option)
 *  any later version.
 *
 *  Video Squirrel is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with Video Squirrel; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

/*!
	\file realmedia_reader.h
	\version \$Id$
	\brief a cross-platform movie cataloger
	\author Jory Stone            <jcsston @ toughguy.net>
	\author Gabest
*/

#include <stdio.h>
#include <string.h>

#define BYTE unsigned char
#define UINT8 unsigned char
#define UINT16 unsigned short
#define UINT32 unsigned long

#ifndef strcmpi
#define strcmpi strcmp
#endif

///RealMedia_Properties.flags
#define PN_SAVE_ENABLED 0x0001										//< Allows clients to save a copy of the RealMedia file to disk.
#define PN_PERFECT_PLAY_ENABLED 0x0002						//< Allows clients to use extra buffering to ensure Perfect Play.
#define PN_LIVE_BROADCAST 0x0004									//< The RealMedia file is being generated by a live broadcast.

struct RealMedia_File_Header
{
	char object_id[4];
	UINT32 size;
	UINT16 object_version;

	UINT32 file_version;
	UINT32 num_headers;
};

struct RealMedia_Properties
{
	//char object_id[4];
	//UINT32    size;
	//UINT16    object_version;

	UINT32   max_bit_rate;
	UINT32   avg_bit_rate;
	UINT32   max_packet_size;
	UINT32   avg_packet_size;
	UINT32   num_packets;
	UINT32   duration;
	UINT32   preroll;
	UINT32   index_offset;
	UINT32   data_offset;
	UINT16   num_streams;
	UINT16   flags;
};

struct RealMedia_Media_Properties
{
	//char object_id[4];
	//UINT32     size;
	//UINT16     object_version;

	UINT16 stream_number;
	UINT32                      max_bit_rate;
	UINT32                      avg_bit_rate;
	UINT32                      max_packet_size;
	UINT32                      avg_packet_size;
	UINT32                      start_time;
	UINT32                      preroll;
	UINT32                      duration;
	UINT8                       stream_name_size;
	char     *stream_name;
	UINT8                       mime_type_size;
	char *mime_type;
	UINT32                      type_specific_len;
	char *type_specific_data;
};

struct RealMedia_Content_Description
{
	//char object_id[4];
	//UINT32     size;
	//UINT16      object_version;

	UINT16    title_len;
	char *title;
	UINT16    author_len;
	char *author;
	UINT16    copyright_len;
	char *copyright;
	UINT16    comment_len;
	char *comment;
};

class RealMedia_Reader
{
	public:
		RealMedia_Reader();
		~RealMedia_Reader();
		int Read(const char *filename);

		RealMedia_File_Header the_header;

		RealMedia_Properties properties_block;
		//UINT8 properties_block_count;

		RealMedia_Media_Properties *media_properties_block[255];
		UINT8 media_properties_block_count;

		RealMedia_Content_Description *content_description_block[255];
		UINT8 content_description_block_count;
};

///Byte Swaping Function by Gabest
void bswap(BYTE* s, int len);

